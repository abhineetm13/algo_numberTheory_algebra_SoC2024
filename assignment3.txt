Assignment 3:

Deadline: 16th July 2024, 23:59 IST

Implement the following functions:

1. get_generator(p : int) -> int : Returns a generator of (Z_p)^*; assume p is prime.

2. discrete_log(x: int, g: int, p: int) -> int : Returns the discrete logarithm of x to the base g in (Z_p)^*; assume p is prime. Raise an exception if the discrete logarithm does not exist.

3. legendre_symbol(a: int, p: int) -> int: Returns the value of the Legendre Symbol (a | p); assume p is prime.

4. jacobi_symbol(a: int, n: int) -> int: Returns the value of the Jacobi Symbol (a | n); assume n is positive.

5. modular_sqrt_prime(x: int, p: int) -> int : Returns the modular square root of x modulo p (where p is prime). Raise an exception if the square root does not exist.

6. modular_sqrt_prime_power(x: int, p: int, e: int) -> int: Returns the modular square root of x modulo p^e (where p is prime, e >= 1). Raise an exception if the square root does not exist.

7. modular_sqrt(x: int, z: int) -> int: Returns the modular square root of x modulo n (n >= 1). Raise an exception if the square root does not exist.

8. is_smooth(m: int, y: int) -> bool: Return True if m is y-smooth, False otherwise.

9. probabilistic_dlog(x: int, g: int, p: int) -> int: Returns the discrete log of x to the base g in (Z_p)^* using a subexponential probabilistic algorithm; assume p is prime, and g is a generator of (Z_p)^*. Raise and exception if the square root does not exist.

10. probabilistic_factor(n: int) -> list[tuple[int, int]]: Returns the prime factorisation of n using a subexponential probabilistic algorithm; assume n >= 1. This should return a list of tuple, where the first component of the tuples are the prime factors, and the second component of the tuple is the respective power to which the corresponding factor is raised in the prime factorisation. The first components must appear in ascending order in the list.

Each of functions 1-8 above are 1 point each, function 9 is worth 2 points, and function 10 is worth 3 points.